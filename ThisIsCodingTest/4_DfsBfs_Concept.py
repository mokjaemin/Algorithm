

# 1. DFS (Depth-First Search)

# 깊이 우선 탐색, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘
# 그래프 - 노드(정점), 간선으로 구성
# 그래프 탐색 - 하나의 노드를 시작으로 다수의 노드를 방문하는 것
# 두 노드가 간선으로 연결되어 있다 = 두 노드가 인접한다.
# 그래프의 표현 방식
# 1. 인접 행렬 : 2차원 배열로 그래프와 연결관계를 표현하는 방식
# 2. 인접 리스트 : 리스트로 그래프의 연결 관계를 표현하는 방식


# 데이터
# 노드1 - 7 - 노드0 - 5 - 노드2
#     0  1  2
#  0  0  7  5
#  1  7  0 INF
#  2  5 INF 0

# ex1 - 인접 행렬
INF = 999999999
graph = [
    [0, 7, 5],
    [1, 7, INF],
    [5, INF, 0]
]
# 2차원 배열에 각 노드가 연결된 형태를 기록하는 방식
# 연결되어 있지 않으면 INF(무한의 비용)으로 표시

# ex2 - 인접 리스트
# 모든 노드에 연결된 노드에 대한 정보를 차례대로 연결하여 저장
# 노드0 - 노드1(7) - 노드2(5)
# 노드1 - 노드0(7)
# 노드2 - 노드0(5)
graph = ([] for _ in range(3))
graph[0].append((1, 7))
graph[0].append((2, 5))
graph[1].append((0, 7))
graph[2].append((0, 5))
# 파이썬에서는 2차원으로 표시

